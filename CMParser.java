/* CMParser.java */
/* Generated By:JavaCC: Do not edit this line. CMParser.java */
public class CMParser implements CMParserConstants {

  public static void main(String args[]) {
    CMParser parser;
    if (args.length == 0) {
      System.out.println("CM Parser:  Reading from standard input . . .");
      parser = new CMParser(System.in);
    } else if (args.length == 1) {
      System.out.println("CM Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new CMParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("CM Parser :  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("CM Parser 1.0.2:  Usage is one of:");
      System.out.println("         java CMParser< inputfile");
      System.out.println("OR");
      System.out.println("         java CMParser inputfile");
      return;
    }
    try {
      parser.program();
      System.out.println("CM Parser :  CMinus program parsed successfully.");
    } catch (ParseException e) {
      System.out.println("CM Parser :  Encountered errors during parse.");
      System.out.println(e);

    }
  }

/*****************************************
 * THE CM LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

//1. program -> declaration-list
  static final public void program() throws ParseException {
    trace_call("program");
    try {
      declarationlist();
    } finally {
      trace_return("program");
    }
  }

//2. declaration-list -> declaration-list declaration | declaration
  static final public void declarationlist() throws ParseException {
    trace_call("declarationlist");
    try {
      declaration();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case VOID:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        declaration();
      }
    } finally {
      trace_return("declarationlist");
    }
  }

//3. declaration -> var-declaration | fun-declaration
  static final public void declaration() throws ParseException {
    trace_call("declaration");
    try {
      if (jj_2_1(3)) {
        vardeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case VOID:{
          fundeclaration();
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("declaration");
    }
  }

//4. var-declaration-> type-specifier <ID> ; | type-specifier <ID> [ <NUMBER> ] ;
  static final public void vardeclaration() throws ParseException {
    trace_call("vardeclaration");
    try {
      if (jj_2_2(3)) {
        typespecifier();
        jj_consume_token(ID);
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case VOID:{
          typespecifier();
          jj_consume_token(ID);
          jj_consume_token(LBRACKET);
          jj_consume_token(NUMBER);
          jj_consume_token(RBRACKET);
          jj_consume_token(SEMICOLON);
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("vardeclaration");
    }
  }

//5. type-specifier-> int | void
  static final public void typespecifier() throws ParseException {
    trace_call("typespecifier");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("typespecifier");
    }
  }

//6. fun-declaration-> type-specifier ID ( params ) compound-stmt
  static final public void fundeclaration() throws ParseException {
    trace_call("fundeclaration");
    try {
      typespecifier();
      jj_consume_token(ID);
      jj_consume_token(LPAREN);
      params();
      jj_consume_token(RPAREN);
      compoundstmt();
    } finally {
      trace_return("fundeclaration");
    }
  }

//7. params-> param-list | VOID
  static final public void params() throws ParseException {
    trace_call("params");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      case INT:{
        paramlist();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("params");
    }
  }

//8. param-list-> param-list , param| param
  static final public void paramlist() throws ParseException {
    trace_call("paramlist");
    try {
      param();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        param();
      }
    } finally {
      trace_return("paramlist");
    }
  }

//9. param-> type-specifier ID | type-specifier ID [ ]
  static final public void param() throws ParseException {
    trace_call("param");
    try {
      if (jj_2_3(3)) {
        typespecifier();
        jj_consume_token(ID);
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case VOID:{
          typespecifier();
          jj_consume_token(ID);
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("param");
    }
  }

//10. compound-stmt-> { local-declarations statement-list }
  static final public void compoundstmt() throws ParseException {
    trace_call("compoundstmt");
    try {
      jj_consume_token(LBRACE);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case INT:
        case RETURN:
        case VOID:
        case WHILE:
        case NUMBER:
        case ID:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case 39:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case VOID:{
          localdeclarations();
          break;
          }
        case IF:
        case RETURN:
        case WHILE:
        case NUMBER:
        case ID:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case 39:{
          statementlist();
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RBRACE);
    } finally {
      trace_return("compoundstmt");
    }
  }

//11. local-declarations-> local-declarations var-declaration | empty
  static final public void localdeclarations() throws ParseException {
    trace_call("localdeclarations");
    try {
      vardeclaration();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case VOID:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        vardeclaration();
      }
    } finally {
      trace_return("localdeclarations");
    }
  }

//12. statement-list-> statement-list statement | empty
  static final public void statementlist() throws ParseException {
    trace_call("statementlist");
    try {
      statement();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case RETURN:
        case WHILE:
        case NUMBER:
        case ID:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case 39:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        statement();
      }
    } finally {
      trace_return("statementlist");
    }
  }

//13. statement-> expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
  static final public void statement() throws ParseException {
    trace_call("statement");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:
      case ID:
      case LPAREN:
      case SEMICOLON:{
        expressionstmt();
        break;
        }
      case LBRACE:{
        compoundstmt();
        break;
        }
      case IF:
      case 39:{
        selectionstmt();
        break;
        }
      case WHILE:{
        iterationstmt();
        break;
        }
      case RETURN:{
        returnstmt();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("statement");
    }
  }

//14. expression-stmt-> expression ; | ;
  static final public void expressionstmt() throws ParseException {
    trace_call("expressionstmt");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:
      case ID:
      case LPAREN:{
        expression();
        jj_consume_token(SEMICOLON);
        break;
        }
      case SEMICOLON:{
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("expressionstmt");
    }
  }

//15. selection-stmt-> if( expression ) statement | if( expression ) statement else
  static final public void selectionstmt() throws ParseException {
    trace_call("selectionstmt");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:{
        jj_consume_token(IF);
        jj_consume_token(LPAREN);
        expression();
        jj_consume_token(38);
        statement();
        break;
        }
      case 39:{
        jj_consume_token(39);
        expression();
        jj_consume_token(38);
        statement();
        jj_consume_token(ELSE);
        statement();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("selectionstmt");
    }
  }

//16. iteration-stmt-> while ( expression ) statement
  static final public void iterationstmt() throws ParseException {
    trace_call("iterationstmt");
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      statement();
    } finally {
      trace_return("iterationstmt");
    }
  }

//17. return-stmt-> return ; | return expression ;
  static final public void returnstmt() throws ParseException {
    trace_call("returnstmt");
    try {
      jj_consume_token(RETURN);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMBER:
        case ID:
        case LPAREN:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        expression();
      }
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("returnstmt");
    }
  }

//18. expression-> var = expression | simple-expression
  static final public void expression() throws ParseException {
    trace_call("expression");
    try {
      if (jj_2_4(5)) {
        var();
        jj_consume_token(ASSIGN);
        simpleexpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMBER:
        case ID:
        case LPAREN:{
          simpleexpression();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("expression");
    }
  }

//19. var-> ID | ID [ expression ]
  static final public void var() throws ParseException {
    trace_call("var");
    try {
      if (jj_2_5(2)) {
        jj_consume_token(ID);
        jj_consume_token(LBRACKET);
        expression();
        jj_consume_token(RBRACKET);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          jj_consume_token(ID);
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("var");
    }
  }

//20. simple-expression -> additive-expression relop additive-expression|additive-expression
  static final public void simpleexpression() throws ParseException {
    trace_call("simpleexpression");
    try {
      additiveexpression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GT:
        case LT:
        case EQ:
        case LE:
        case GE:
        case NE:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        relop();
        additiveexpression();
      }
    } finally {
      trace_return("simpleexpression");
    }
  }

//21. relop-> < | <= | > | >= | == | !=
  static final public void relop() throws ParseException {
    trace_call("relop");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        jj_consume_token(LT);
        break;
        }
      case LE:{
        jj_consume_token(LE);
        break;
        }
      case GT:{
        jj_consume_token(GT);
        break;
        }
      case GE:{
        jj_consume_token(GE);
        break;
        }
      case EQ:{
        jj_consume_token(EQ);
        break;
        }
      case NE:{
        jj_consume_token(NE);
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("relop");
    }
  }

//22. additive-expression-> additive-expression addop term | term
  static final public void additiveexpression() throws ParseException {
    trace_call("additiveexpression");
    try {
      term();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        addop();
        term();
      }
    } finally {
      trace_return("additiveexpression");
    }
  }

//23. addop-> + | -
  static final public void addop() throws ParseException {
    trace_call("addop");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("addop");
    }
  }

//24. term-> term mulop factor | factor
  static final public void term() throws ParseException {
    trace_call("term");
    try {
      factor();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:
        case SLASH:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_9;
        }
        mulop();
        factor();
      }
    } finally {
      trace_return("term");
    }
  }

//25. mulop-> * | /
  static final public void mulop() throws ParseException {
    trace_call("mulop");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        jj_consume_token(STAR);
        break;
        }
      case SLASH:{
        jj_consume_token(SLASH);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("mulop");
    }
  }

//26. factor-> ( expression ) | var | call | NUM
  static final public void factor() throws ParseException {
    trace_call("factor");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        expression();
        jj_consume_token(RPAREN);
        break;
        }
      case NUMBER:
      case ID:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMBER:{
          jj_consume_token(NUMBER);
          break;
          }
        case ID:{
          if (jj_2_6(2)) {
            call();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ID:{
              var();
              break;
              }
            default:
              jj_la1[23] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("factor");
    }
  }

//27. call-> ID ( args )
  static final public void call() throws ParseException {
    trace_call("call");
    try {
      jj_consume_token(ID);
      jj_consume_token(LPAREN);
      args();
      jj_consume_token(RPAREN);
    } finally {
      trace_return("call");
    }
  }

//28. args-> arg-list | empty
  static final public void args() throws ParseException {
    trace_call("args");
    try {
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMBER:
        case ID:
        case LPAREN:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_10;
        }
        arglist();
      }
    } finally {
      trace_return("args");
    }
  }

//29. arg-list-> arg-list , expression | expression
  static final public void arglist() throws ParseException {
    trace_call("arglist");
    try {
      expression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        expression();
      }
    } finally {
      trace_return("arglist");
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_35()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_13()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_3R_13()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3R_31()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_3R_30()) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    return false;
  }

  static private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    return false;
  }

  static private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_14()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_29()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_3R_23()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    return false;
  }

  static private boolean jj_3R_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_13()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_3R_27()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CMParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa00,0xa00,0xa00,0xa00,0xa00,0x2000000,0xa00,0x114bf00,0x114bf00,0xa00,0x114b500,0x114b500,0x104a000,0x100,0x4a000,0x4a000,0x8000,0xf0000000,0xf0000000,0x0,0x0,0x0,0x0,0x8000,0xa000,0x4a000,0x4a000,0x2000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x0,0x80,0x80,0x0,0x80,0x0,0x0,0x0,0x3,0x3,0xc,0xc,0x30,0x30,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CMParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CMParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CMParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CMParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CMParser(CMParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CMParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
